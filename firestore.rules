/**
 * @fileoverview Firestore Security Rules for NexusLearn Lite.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for all data. Each user has a dedicated data tree under `/users/{userId}`, and only the authenticated user can read or write data within their own tree.
 *
 * Data Structure:
 * All data is nested under the `/users/{userId}` collection. This includes user profiles, achievements, study goals, quizzes, journal entries, pomodoro sessions, and mistake analyses.
 *
 * Key Security Decisions:
 * - User listing is disallowed to protect user privacy.
 * - All write operations are strictly controlled based on user ownership.
 * - Data consistency is enforced where necessary to ensure that data within a user's path belongs to that user.
 *
 * Denormalization for Authorization:
 *  - Path-based ownership under /users/{userId} avoids the need for `get()` calls to verify ownership.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the request is authenticated.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the authenticated user ID matches the provided user ID.
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Checks if the authenticated user is the owner of the existing document.
     */
    function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
    }

    /**
     * @description Rules for the /users/{userId} collection.
     * @path /users/{userId}
     * @allow (create) User ZFGwmszpIqRZvYdV1EFVZfyNJk12 can create their own profile.
     * @deny (create) User ABC cannot create a profile for user DEF.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false; // User listing is not allowed.
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rules for the /users/{userId}/achievements/{achievementId} collection.
     * @path /users/{userId}/achievements/{achievementId}
     * @allow (create) User ZFGwmszpIqRZvYdV1EFVZfyNJk12 can create an achievement in their own profile.
     * @deny (create) User ABC cannot create an achievement for user DEF.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId}/achievements/{achievementId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rules for the /users/{userId}/studyGoals/{studyGoalId} collection.
     * @path /users/{userId}/studyGoals/{studyGoalId}
     * @allow (create) User ZFGwmszpIqRZvYdV1EFVZfyNJk12 can create a study goal in their own profile.
     * @deny (create) User ABC cannot create a study goal for user DEF.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId}/studyGoals/{studyGoalId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rules for the /users/{userId}/quizzes/{quizId} collection.
     * @path /users/{userId}/quizzes/{quizId}
     * @allow (create) User ZFGwmszpIqRZvYdV1EFVZfyNJk12 can create a quiz in their own profile.
     * @deny (create) User ABC cannot create a quiz for user DEF.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId}/quizzes/{quizId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rules for the /users/{userId}/quizzes/{quizId}/questions/{questionId} collection.
     * @path /users/{userId}/quizzes/{quizId}/questions/{questionId}
     * @allow (create) User ZFGwmszpIqRZvYdV1EFVZfyNJk12 can create a question in their own quiz.
     * @deny (create) User ABC cannot create a question for user DEF's quiz.
     * @principle Enforces document ownership for writes, inherited from the quiz.
     */
    match /users/{userId}/quizzes/{quizId}/questions/{questionId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rules for the /users/{userId}/journalEntries/{journalEntryId} collection.
     * @path /users/{userId}/journalEntries/{journalEntryId}
     * @allow (create) User ZFGwmszpIqRZvYdV1EFVZfyNJk12 can create a journal entry in their own profile.
     * @deny (create) User ABC cannot create a journal entry for user DEF.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId}/journalEntries/{journalEntryId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rules for the /users/{userId}/pomodoroSessions/{pomodoroSessionId} collection.
     * @path /users/{userId}/pomodoroSessions/{pomodoroSessionId}
     * @allow (create) User ZFGwmszpIqRZvYdV1EFVZfyNJk12 can create a pomodoro session in their own profile.
     * @deny (create) User ABC cannot create a pomodoro session for user DEF.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId}/pomodoroSessions/{pomodoroSessionId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rules for the /users/{userId}/mistakeAnalyses/{mistakeAnalysisId} collection.
     * @path /users/{userId}/mistakeAnalyses/{mistakeAnalysisId}
     * @allow (create) User ZFGwmszpIqRZvYdV1EFVZfyNJk12 can create a mistake analysis in their own profile.
     * @deny (create) User ABC cannot create a mistake analysis for user DEF.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId}/mistakeAnalyses/{mistakeAnalysisId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }
  }
}